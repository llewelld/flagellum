// David Llewellyn-Jones david@flypig.co.uk, 31/10/2019
// Based on "Bokeh Paralax" by Krzysztof Narkowicz @knarkowicz
// License: public domain
// See https://www.shadertoy.com/view/4s2yW1

precision highp float;

#define M_PI 3.1415926535897932384626433832795
varying vec2 fragCoord;
uniform float iGlobalTime;
uniform vec3 iResolution;
uniform vec2 iScroll;

void rotate(inout vec2 p, float a)  {
	p = cos(a) * p + sin(a) * vec2(p.y, -p.x);
}

float circle(vec2 p, float r) {
	return (length( p / r) - 1.0) * r;
}

float rand(vec2 c) {
	return fract(sin(dot(c.xy, vec2( 12.9898, 78.233))) * 43758.5453);
}

float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}

void bokehlayer(inout vec3 color, vec2 p, vec3 c, float scale) {
	float wrap = 550.0;    
	if (mod(floor(p.y / wrap + 0.5 ), 2.0) == 0.0) {
		p.x += wrap * 0.5;
	}

	vec2 p2 = mod(p + 0.5 * wrap, wrap) - 0.5 * wrap;
	vec2 cell = floor(p / wrap + 0.5);
	float cellR = rand(cell);

	c *= fract(scale * 3.33 + 3.33);    
	float radius = mix(30.0, 70.0, fract( scale * 7.77 + 7.77));
	p2.x *= mix(0.9, 1.1, fract( scale * 11.13 + 11.13));
	p2.y *= mix(0.9, 1.1, fract( scale * 17.17 + 17.17));
	p2 *= 1.5;

	vec2 p3 = p2 * 1.5;

	float time = iGlobalTime / (2.0 + cellR);
    
	p2.y /= (1.0 - max(20.0 * (sin(time) - 0.95), 0.0)) * 1.0;
   
	float outer_distance = circle(p2, radius);
	float outer = 1.0 - smoothstep(0.0, 1.0, outer_distance * 0.04);

	float inner_distance = circle(p3, radius / 10.0);
	float inner = 1.0 - smoothstep(0.0, 1.0, inner_distance * 0.04);
    
	color += c * max(outer - inner, 0.0);

	if ((inner > 0.0) && (outer > 0.0)) {
		color *= 0.0;
	}
}

void main () {
	vec4 fragColor;
	vec2 uv = fragCoord.xy / iResolution.xy;
	vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.x * 1000.0;
	vec2 shifted;

	vec2 shift;
	shift.x = 0.0;
	shift.y = iScroll.y * iResolution.y;

	// background
	vec3 color = mix(vec3( 0.1, 0.0, 0.1), vec3(0.1, 0.2, 0.5), dot(uv, vec2( 0.2, 0.7)));
	//vec3 color = vec3( 0.0, 0.0, 0.0 );

	shifted = p + 0.2 * shift;
	rotate(shifted, 0.2);
	bokehlayer(color, shifted + vec2( 0.0, 00.0  ), 3.0 * vec3( 1.0, 1.0, 1.0), 0.5);

	shifted = p + 1.0 * shift;
	rotate(shifted, 0.5);
	bokehlayer(color, shifted + vec2( 100.0, 70.0  ), 3.0 * vec3( 1.0, 1.0, 1.0), 10.0);
    
	shifted = p + 0.9 * shift;
	rotate(shifted, 1.8);
	bokehlayer(color, shifted + vec2( 20.0, 120.0  ), 3.0 * vec3( 1.0, 1.0, 1.0), 20.0);
    
	shifted = p + 0.0 * shift;
	rotate(shifted, 1.1);
	bokehlayer(color, shifted + vec2( 40.0, 30.0  ), 3.0 * vec3( 1.0, 1.0, 1.0), 15.0);
    
	fragColor = vec4(color, 1.0);
	gl_FragColor = fragColor;
}

