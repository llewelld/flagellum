// "Bokeh Paralax" by Krzysztof Narkowicz @knarkowicz
// License: public domain
// See https://www.shadertoy.com/view/4s2yW1
// Edited by David Llewellyn-Jones david@flypig.co.uk, 31/5/2017

precision highp float;

#define M_PI 3.1415926535897932384626433832795
varying vec2 fragCoord;
uniform float iGlobalTime;
uniform vec3 iResolution;
uniform vec2 iScroll;

void rotate(inout vec2 p, float a)  {
	p = cos(a) * p + sin(a) * vec2(p.y, -p.x);
}

float circle(vec2 p, float r) {
	return (length( p / r) - 1.0) * r;
}

float rand(vec2 c) {
	return fract(sin(dot(c.xy, vec2( 12.9898, 78.233))) * 43758.5453);
}

float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}

void bokehlayer(inout vec3 color, vec2 p, vec3 c) {
	float wrap = 450.0;    
	if (mod(floor(p.y / wrap + 0.5 ), 2.0) == 0.0) {
		p.x += wrap * 0.5;
	}    

	vec2 p2 = mod(p + 0.5 * wrap, wrap) - 0.5 * wrap;
	vec2 cell = floor(p / wrap + 0.5);
	float cellR = rand(cell);

	c *= fract(cellR * 3.33 + 3.33);    
	float radius = mix(30.0, 70.0, fract( cellR * 7.77 + 7.77));
	p2.x *= mix(0.9, 1.1, fract( cellR * 11.13 + 11.13));
	p2.y *= mix(0.9, 1.1, fract( cellR * 17.17 + 17.17));

	float sdf = circle(p2, radius);
	float circle = 1.0 - smoothstep(0.0, 1.0, sdf * 0.04);
	float glow	 = exp(-sdf * 0.025) * 0.3 * (1.0 - circle);
	color += c * (circle + glow);
}

void main () {
	vec4 fragColor;
	vec2 uv = fragCoord.xy / iResolution.xy;
	vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.x * 1000.0;
	vec2 shifted;

	vec2 shift;
	shift.x = 0.0;
	shift.y = iScroll.y * iResolution.y;

	// background
	vec3 color = mix(vec3( 0.1, 0.0, 0.1), vec3(0.1, 0.2, 0.5), dot(uv, vec2( 0.2, 0.7)));

	float time = iGlobalTime / 1.5 - 15.0;

	shifted = p + 0.2 * shift;
	rotate(shifted, 0.2 + time * 0.03);
	bokehlayer(color, shifted + vec2( -50.0 * time +  0.0, 0.0  ), 3.0 * vec3( 0.4, 0.1, 0.2));
	shifted = p + 0.6 * shift;
	rotate(shifted, 0.3 - time * 0.05);
	bokehlayer(color, shifted + vec2( -70.0 * time + 33.0, -33.0 ), 3.5 * vec3( 0.6, 0.4, 0.2));
	shifted = p + 1.0 * shift;
	rotate(shifted, 0.5 + time * 0.07);
	bokehlayer(color, shifted + vec2( -60.0 * time + 55.0, 55.0 ), 3.0 * vec3( 0.4, 0.3, 0.2));
	shifted = p + 1.4 * shift;
	rotate(shifted, 0.9 - time * 0.03);
	bokehlayer(color, shifted + vec2( -25.0 * time + 77.0, 77.0 ), 3.0 * vec3( 0.4, 0.2, 0.1));
	shifted = p + 1.8 * shift;
	rotate(shifted, 0.0 + time * 0.05);
	bokehlayer(color, shifted + vec2( -15.0 * time + 99.0, 99.0 ), 3.0 * vec3( 0.2, 0.0, 0.4));

	fragColor = vec4(color, 1.0);
	gl_FragColor = fragColor;
}
